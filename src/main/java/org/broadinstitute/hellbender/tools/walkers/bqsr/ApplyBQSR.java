/**
 * This tool replaces PrintReads in the BQSR step of GATK3. It will recalibrate base qualities based on the covariates
 * table produced by the BaseRecalibrator tool and output a recalibrated BAM file.
 *
 * <p>
 * Note: You should only run ApplyBQSR with the covariates table created on the same input BAM(s) or CRAM(s).
 *
 * This tool performs the second pass in a two-stage process called BQSR; the first pass is performed by the
 * <a href='INSERTBASERECALIBRATORDOC'>BaseRecalibrator</a> tool.
 * In brief, the first pass consists of calculating error empirically and finding patterns in how error varies with
 * basecall features. The method is empowered by looking at entire lanes of data. The second pass creates a new BAM file
 * using the input table generated by BaseRecalibrator. You must use the -BQSR flag explained in the tool arguments. The tools retain the
 * original quality scores with OQ tag.
 *
 * <h3>Input</h3> <p> A BAM file and the recalibration table from BaseRecalibrator. </p>
 *
 * <h3>Output</h3> <p> Recalibrated BAM file. </p>
 *
 * <h3>Usage example</h3>
 * <pre>
 * ./gatk-launch ApplyBQSR  \\
 *   -R reference.fasta \
 *   -I input.bam \
 *   -BQSR recal.table
 *   -O output.bam
 *
 * </p>
 *
 *
 *
 */
package org.broadinstitute.hellbender.tools.walkers.bqsr;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.broadinstitute.barclay.argparser.Argument;
import org.broadinstitute.barclay.argparser.ArgumentCollection;
import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;
import org.broadinstitute.barclay.help.DocumentedFeature;
import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;
import org.broadinstitute.hellbender.cmdline.programgroups.ReadProgramGroup;
import org.broadinstitute.hellbender.engine.FeatureContext;
import org.broadinstitute.hellbender.engine.ReadWalker;
import org.broadinstitute.hellbender.engine.ReferenceContext;
import org.broadinstitute.hellbender.tools.ApplyBQSRArgumentCollection;
import org.broadinstitute.hellbender.transformers.BQSRReadTransformer;
import org.broadinstitute.hellbender.transformers.ReadTransformer;
import org.broadinstitute.hellbender.utils.Utils;
import org.broadinstitute.hellbender.utils.read.GATKRead;
import org.broadinstitute.hellbender.utils.read.SAMFileGATKReadWriter;

import java.io.File;

@CommandLineProgramProperties(
        summary = "Applies the BQSR table to the input SAM/BAM/CRAM",
        oneLineSummary = "Applies the BQSR table to the input SAM/BAM/CRAM",
        programGroup = ReadProgramGroup.class
)
@DocumentedFeature
public final class ApplyBQSR extends ReadWalker{

    private static final Logger logger = LogManager.getLogger(ApplyBQSR.class);

    @Argument(fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME, shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME, doc="Write output to this file")
    public File OUTPUT;

    /**
     * Enables recalibration of base qualities.
     * The covariates tables are produced by the BaseRecalibrator tool.
     * Please be aware that you should only run recalibration with the covariates file created on the same input bam(s).
     */
    @Argument(fullName=StandardArgumentDefinitions.BQSR_TABLE_LONG_NAME, shortName=StandardArgumentDefinitions.BQSR_TABLE_SHORT_NAME, doc="Input covariates table file for base quality score recalibration")
    public File BQSR_RECAL_FILE;

    /**
     * command-line arguments to fine tune the recalibration.
     */
    @ArgumentCollection
    public ApplyBQSRArgumentCollection bqsrArgs = new ApplyBQSRArgumentCollection();
    
    private SAMFileGATKReadWriter outputWriter;

    /**
     * Returns the BQSR post-transformer.
     */
    @Override
    public ReadTransformer makePostReadFilterTransformer(){
        return new BQSRReadTransformer(getHeaderForReads(), BQSR_RECAL_FILE, bqsrArgs);
    }

    @Override
    public void onTraversalStart() {
        outputWriter = createSAMWriter(OUTPUT, true);
        Utils.warnOnNonIlluminaReadGroups(getHeaderForReads(), logger);
    }

    @Override
    public void apply( GATKRead read, ReferenceContext referenceContext, FeatureContext featureContext ) {
        outputWriter.addRead(read);
    }

    @Override
    public void closeTool() {
        if ( outputWriter != null ) {
            outputWriter.close();
        }
    }
}
